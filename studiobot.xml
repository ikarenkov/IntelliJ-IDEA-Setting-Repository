<application>
  <component name="StudioBotSettings">
    <option name="contextSharingModeV2" value="AlwaysShare" />
    <option name="enableCodeCompletion" value="false" />
    <option name="onboardedVersion" value="3" />
    <option name="queryHistory">
      <list>
        <historyEntry timestamp="1720435702447">How in rx java 2 make convert cold Observable to BehaviorSubject</historyEntry>
        <historyEntry timestamp="1719999473070">I have a problem with using OnBackPressedDispatcher with activity and fragment inside this activity.
I use requireActivity().onBackPressedDispatcher.addCallback(this, OnBackPressedListener()) inside fragment's onCreate to add callback. I do the same in activity, but I don't recieve back pressed in fragment, I only recieve on back pressed in activity. I dived into this and figured out that inside OnBackPressedDispatcher ON_START fistly called for fragment and only then for activity, that seems wrong, because I expected that ON_START firstly is going to be called on parent and only then on a child</historyEntry>
        <historyEntry timestamp="1719999467568">I have a problem with using OnBackPressedDispatcher with activity and fragment inside this activity.
I use requireActivity().onBackPressedDispatcher.addCallback(this, OnBackPressedListener()) inside fragment's onCreate to add callback. I do the same in activity, but I don't recieve back pressed in fragment, I only recieve on back pressed in activity. I dived into this and figured out that inside OnBackPressedDispatcher ON_START fistly called for fragment and only then for activity, that seems wrong, because I expected that ON_START firstly is going to be called on parent and only then on a child</historyEntry>
        <historyEntry timestamp="1719497762419">If I have several DisposableEffect in my composable, what is the order of onDispose?</historyEntry>
        <historyEntry timestamp="1719494685203">How to correctly use remember with derivedStateOf? For me it looks like provided code is incorrect and we don't need to use parameters for remember:
val formHelperState by remember(isComponentEnabled, hasError) {
derivedStateOf {
                when {
                    isComponentEnabled.not() -&gt; FormHelperSpec.State.Disabled
                    hasError -&gt; FormHelperSpec.State.Invalid
                    else -&gt; FormHelperSpec.State.Default
                }
            }
        }</historyEntry>
        <historyEntry timestamp="1719171915419">Make suggestions to improve this code:
@Parcelize
class AnimationStackScreen(
    val navModel: StackNavModel = StackNavModel(AnimationScreen())
) : StackScreen(navModel) {

    private fun defaultEnterTransition() = fadeIn()
    private fun defaultExitTransition() = fadeOut()

    @Composable
    override fun Content(modifier: Modifier) {
        TopScreenContent(modifier) { modifier -&gt;
            ScreenTransition(
                modifier = modifier,
                transitionSpec = {
                    val lastNew = newState?.stack?.lastOrNull()
                    val lastNewAnimation = lastNew as? StackAnimation
                    val lastOld = oldState?.stack?.lastOrNull()
                    val lastOldAnimation = lastOld as? StackAnimation
                    val transitionType = calculateStackTransitionType()
                    when (transitionType) {
                        StackTransitionType.Push -&gt; {
                            lastNewAnimation?.getPushTransition(this)
                                ?: (
                                    (lastNewAnimation?.getPushEnterTransition(this) ?: defaultEnterTransition()) togetherWith
                                        (lastOldAnimation?.getPushExitTransition(this) ?: defaultExitTransition())
                                    )
                        }
                        StackTransitionType.Replace -&gt; {
                            lastNewAnimation?.getReplaceTransition(this)
                                ?: (
                                    (lastNewAnimation?.getReplaceEnterTransition(this) ?: defaultEnterTransition()) togetherWith
                                        (lastOldAnimation?.getReplaceExitTransition(this) ?: defaultExitTransition())
                                    )
                        }
                        StackTransitionType.Pop -&gt; {
                            lastNewAnimation?.getPopTransition(this)
                                ?: (
                                    (lastNewAnimation?.getPopEnterTransition(this) ?: defaultEnterTransition()) togetherWith
                                        (lastOldAnimation?.getPopExitTransition(this) ?: defaultExitTransition())
                                    )
                        }
                        StackTransitionType.Idle -&gt; EnterTransition.None togetherWith ExitTransition.None
                    }
                }
            )
        }
    }
}</historyEntry>
        <historyEntry timestamp="1719171036057">Make suggestions to improve this code:
/**
 * Interface for defining custom screen transitions for a stack-based navigation controller.
 *
 * Allows specifying enter and exit transitions for different navigation operations, including pushing, replacing, and popping screens.
 *
 * @see StackTransitionType
 * @see AnimatedContentTransitionScope
 */
interface StackAnimation {

    /**
     * Defines the enter transition for this screen when a push operation is detected.
     * The enter transition describes how this screen appears during a push operation.
     * If this method returns null, the default behavior is to use the transition defined in `getPushTransition`.
     */
    fun getPushEnterTransition(animationScope: AnimatedContentTransitionScope&lt;Screen&gt;): EnterTransition? =
        null

    /**
     * Defines the exit transition for this screen when a push operation is detected.
     * The exit transition describes how the previous screen (this) disappears during a push operation.
     * If this method returns null, the default behavior is to use the transition defined in `getPushTransition`.
     */
    fun getPushExitTransition(animationScope: AnimatedContentTransitionScope&lt;Screen&gt;): ExitTransition? =
        null

    /**
     * Defines the transition for this and hiding screens when this screen is pushed to the Stack.
     * If this is not null, [getPushEnterTransition] and [getPushExitTransition] are not taken into account.
     */
    fun getPushTransition(animationScope: AnimatedContentTransitionScope&lt;Screen&gt;): ContentTransform? =
        null

    /**
     * Defines the enter transition for this screen when it replaces another screen in the Stack.
     * The enter transition describes how this screen appears during a replace operation.
     * If this method returns null, the default behavior is to use the transition defined in `getReplaceTransition`.
     */
    fun getReplaceEnterTransition(animationScope: AnimatedContentTransitionScope&lt;Screen&gt;): EnterTransition? =
        null

    /**
     * Defines the exit transition for the replaced screen during a replace operation.
     * The exit transition describes how the replaced screen disappears during a replace operation.
     * If this method returns null, the default behavior is to use the transition defined in `getReplaceTransition`.
     */
    fun getReplaceExitTransition(animationScope: AnimatedContentTransitionScope&lt;Screen&gt;): ExitTransition? =
        null

    /**
     * Defines the transition (enter and exit) when this screen replaces another in the Stack.
     * If this is not null, [getReplaceEnterTransition] and [getReplaceExitTransition] are not taken into account.
     */
    fun getReplaceTransition(animationScope: AnimatedContentTransitionScope&lt;Screen&gt;): ContentTransform? =
        null

    /**
     * Defines the enter transition for this screen when the previous screen is popped.
     * The enter transition describes how this screen appears during a pop operation.
     * If this method returns null, the default behavior is to use the transition defined in `getPopTransition`.
     */
    fun getPopEnterTransition(animationScope: AnimatedContentTransitionScope&lt;Screen&gt;): EnterTransition? =
        null

    /**
     * Defines the exit transition for this screen when it is popped.
     * The exit transition describes how this screen disappears during a pop operation.
     * If this method returns null, the default behavior is to use the transition defined in `getPopTransition`.
     */
    fun getPopExitTransition(animationScope: AnimatedContentTransitionScope&lt;Screen&gt;): ExitTransition? =
        null

    /**
     * Defines the transition (enter and exit) when this screen is popped from the Stack.
     * If this is not null, [getPopEnterTransition] and [getPopExitTransition] are not taken into account.
     */
    fun getPopTransition(animationScope: AnimatedContentTransitionScope&lt;Screen&gt;): ContentTransform? =
        null
}</historyEntry>
        <historyEntry timestamp="1719168462575">Make suggestions to improve this code:
/**
 * The exit transition that will be applied when a new screen appears on top of it because of [StackTransitionType.Push] command.
 */
fun getPushExitTransition(animationScope: AnimatedContentTransitionScope&lt;Screen&gt;): ExitTransition? =
    null</historyEntry>
        <historyEntry timestamp="1718985481694">But what if int is a px size?</historyEntry>
        <historyEntry timestamp="1718985460874">How to use int as padding?</historyEntry>
        <historyEntry timestamp="1718985333737">But how to do it without onGloballyPositioned?</historyEntry>
        <historyEntry timestamp="1718985170962">But how to do the same simplier? F.e. with BoxWithBoxWithConstraints</historyEntry>
        <historyEntry timestamp="1718985050089">How to get the height of composable node to arage sibling?</historyEntry>
        <historyEntry timestamp="1718898428592">And what is analogue for accelirate-decelirate?</historyEntry>
        <historyEntry timestamp="1718898364580">What easing is analogue for DecelerateInterpolator?</historyEntry>
        <historyEntry timestamp="1718372888622">Why is it limmited by package?</historyEntry>
        <historyEntry timestamp="1718372771708">Inheritor of sealed class or interface declared in package ru.hh.applicant.feature.skills_gap.presentation.choose_resume but it must be in package ru.hh.applicant.feature.skills_gap.presentation where base class is declared. Why? Sealed classes only limited by module</historyEntry>
        <historyEntry timestamp="1717490869691">Make suggestions to improve this code:
# Screen effects

Modo provides a set of side-effect that are similar to the `LaunchedEffect` and `DisposableEffect` from Jetpack Compose, but they are tied to the
screen lifecycle:

* `LaunchedScreenEffct` - executes the given `block: suspend CoroutineScope.() -&gt; Unit` when the screen is created and cancels coroutine scope when
  the screen is removed.
* `DisposableScreenEffect` - executes the given `effect: DisposableEffectScope.() -&gt; DisposableEffectResult` whe the screen is created and calls
  the `DisposableEffectResult.dispose()` of returned `DisposableEffectResult` when the screen is removed.
* `OnScreenRemoved` - executes when the screen is removed from the navigation graph. It is similar to the `DisposableScreenEffect`.
* `LifecycleScreenEffect` - a shortcut for subscribing to screen's lifecycle, that uses `DisposableScreenEffect` under the hood.

You can use them when you need to perform some action when screen is created and then dispose it when screen is removed. F.e. you can use it to create
and close DI scope.

1. effects called called once per `Screen` instance, when the given fun enters to the composition and this block wasn't called for
   this `Screen`'s instance.
2. Effect disposed when the `Screen` is removed from the navigation graph.

&lt;include from=&quot;snippets.topic&quot; element-id=&quot;under_develop_note&quot;&gt;&lt;/include&gt;

## Examples of usage

### Analytics

You can use `DisposableScreenEffect` to track screen first visit and remove events:

```Kotlin
DisposableScreenEffect {
    logcat { &quot;Analytics: screen created. Counter: $counter.&quot; }
    onDispose {
        logcat { &quot;Analytics: screen destroyed.  Counter: $counter.&quot; }
    }
}
```

### DI scope integration

You can use `OnScreenRemoved` with `remember` to create and close DI scope. Scope of `Screen` can be identified by `screenKey`. Here is a sample of
how you can use it with Toothpick:

```Kotlin
@Composable
internal fun Screen.rememberScreenScope(
    parentScope: Scope = LocalToothpickScope.current,
    moduleProvider: () -&gt; Module = { module { } },
): Scope {
    val scope = remember {
        getOrInitScope(screenKey, parentScope, moduleProvider)
    }
    OnScreenRemoved(&quot;scope&quot;) {
        Toothpick.closeScope(scope.name)
    }
    return scope
}

private fun getOrInitScope(
    screenKey: ScreenKey,
    parentScope: Scope,
    moduleProvider: () -&gt; Module = { module { } },
): Scope {
    val scopeName = screenKey.scopeName()
    return if (Toothpick.isScopeOpen(scopeName)) {
        Toothpick.openScope(scopeName)
    } else {
        val scope = Toothpick.openScopes(parentScope.name, scopeName)
        scope.installModules(moduleProvider.invoke())
    }
}
```</historyEntry>
        <historyEntry timestamp="1717449882631">In coroutine 1.7.3 there is no such function</historyEntry>
        <historyEntry timestamp="1717449822605">What is onCancellation?</historyEntry>
        <historyEntry timestamp="1717449742182">How to execute code of coroutine when it is canceled?</historyEntry>
        <historyEntry timestamp="1717408990523">Make suggestions to improve this code:
&lt;note&gt;This part of the documentation is under development and can contains incomplete or empty sections.&lt;/note&gt;</historyEntry>
        <historyEntry timestamp="1717400243423">Generate a text for the page &quot;Community and contribution&quot;. It is for documentation of Modo - navigation library for jetpack compose. We have telegram group and github page. Motivate people to enchance library and documentation</historyEntry>
        <historyEntry timestamp="1717353647836">If we take a tree-graph, there are leaf nodes - nodes without childs. What is a name for other nodes?</historyEntry>
        <historyEntry timestamp="1717247073995">Make suggestions to improve this code:
# Modo

[![Maven Central](https://img.shields.io/maven-central/v/com.github.terrakok/modo-compose)](https://repo1.maven.org/maven2/com/github/terrakok)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

&lt;list columns=&quot;2&quot;&gt;
    &lt;li&gt;
        &lt;p&gt;
            &lt;b&gt;Modo&lt;/b&gt; is a simple and convenient state-base navigation library for Jetpack Compose. It offers a flexible and powerful way to manage navigation in your application.
        &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;
            Sample video overview:
            &lt;video src=&quot;../videos/modo_0.9.0_sample_overview.mp4&quot; preview-src=&quot;../images/media/modo_0.9.0_sample_overview_preview.png&quot; width=&quot;300&quot;/&gt;
        &lt;/p&gt;
    &lt;/li&gt;
&lt;/list&gt;

## Overview of Modo

UI of Modo navigation is defined by `NavigationState`, that contains of structure of `Screen` and `ContainerScreen`: ![diagram_1.png](diagram_1.png){
height = 400 }

### Screen

`Screen` is a basic unit of UI. To render content, create `Screen` implementation and override `fun Content(modifier: Modifier)`

```kotlin
```

{ src=&quot;SampleScreen.kt&quot; default-state=&quot;collapsed&quot; collapsible=&quot;true&quot; collapsed-title=&quot;SampleScreen&quot;}

### Performing navigation

To update state, use `dispatch(action: Action)` on `NavigationContainer`, or build-in extension functions
for [StackScreen]()
and [MultiScreen]()

* `Screen` can be injected into your DI container, but it must be removed from DI as soon as `Screen` is removed from hierarchy. You can use build-in
  screen effects for this purpose.

## Getting Started

To get started with Modo, check out our [Quick Start Guide](QuickStartGuide.md) and explore
the [sample application](https://github.com/ikarenkov/Modo/tree/dev/sample) to see how Modo can simplify your navigation needs.

# List of features

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;Feature&lt;/td&gt;&lt;td&gt;Status&lt;/td&gt;&lt;td&gt;Source/Docs&lt;/td&gt;&lt;td&gt;Sample&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Stack navigation&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/stack/StackScreen.kt&quot;&gt;StackScreen&lt;/a&gt;, &lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/stack/StackActions.kt&quot;&gt;build-in commands&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/containers/SampleStack.kt&quot;&gt;SampleStack&lt;/a&gt;, &lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/stack/StackActionsScreen.kt&quot;&gt;sample&lt;/a&gt; of navigation actions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Multi screen navigation&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/multiscreen/MultiScreen.kt&quot;&gt;MultiScreen&lt;/a&gt;, &lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/multiscreen/MultiScreenActions.kt&quot;&gt;build-in commands&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/containers/SampleMultiScreen.kt&quot;&gt;SampleMultiscreen&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Dialogs&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/DialogScreen.kt&quot;&gt;DialogScreen&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/dialogs/DialogsPlayground.kt&quot;&gt;Dialogs playground&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Arguments&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;Arguments can be passed as constructor parameter of Screen.&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/MainScreen.kt&quot;&gt;MainScreen&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Animation&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/animation/ScreenTransitions.kt&quot;&gt;ScreenTransition&lt;/a&gt;, &lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/animation/StackTransitionType.kt&quot;&gt;helpers for stack screen transition&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/containers/SampleStack.kt&quot;&gt;SampleStack&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Android lifecycle support&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/android/ModoScreenAndroidAdapter.kt&quot;&gt;ModoScreenAndroidAdapter&lt;/a&gt; connect Modo with android-related features. You can safely use LocalLifecycleOwner and other fun inside Screen's. To correctly observe screen lifecycle it's recommender to use &lt;code&gt;LifecycleScreenEffect&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/MainScreen.kt&quot;&gt;MainScreen&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Android ViewModel support&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/android/ModoScreenAndroidAdapter.kt&quot;&gt;ModoScreenAndroidAdapter&lt;/a&gt; connect Modo with android-related features. You can safely use &lt;code&gt;viewModel&lt;/code&gt; and other fun inside Screen's.&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/viewmodel/AndroidViewModelSampleScreen.kt&quot;&gt;AndroidViewModelSampleScreen.kt&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Activity and fragment integration&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;Use &lt;code&gt;rememberRootScreen&lt;/code&gt; inside &lt;code&gt;Fragment&lt;/code&gt; or &lt;code&gt;Activity&lt;/code&gt;. These functions are declared in &lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/Modo.kt&quot;&gt;Modo&lt;/a&gt; and automatically handle saving and restoring during &lt;code&gt;Activity&lt;/code&gt; lifecycle and process death.&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/ModoSampleActivity.kt&quot;&gt;ModoSampleActivity&lt;/a&gt;, &lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/fragment/ModoFragment.kt&quot;&gt;ModoFragment.kt&lt;/a&gt;, &lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/ModoLegacyIntegrationActivity.kt&quot;&gt;ModoLegacyIntegrationActivity.kt&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Activity and process death handling&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;Automatically provided by &lt;code&gt;Fragment&lt;/code&gt; and &lt;code&gt;Activity&lt;/code&gt; Modo integration. For more details take a look to&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/ModoSampleActivity.kt&quot;&gt;ModoSampleActivity&lt;/a&gt;, &lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/fragment/ModoFragment.kt&quot;&gt;ModoFragment.kt&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Screen effects&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;You can use &lt;code&gt;LaunchedScreenEffect&lt;/code&gt; and &lt;code&gt;DisposableScreenEffect&lt;/code&gt; analogies for &lt;code&gt;Screen&lt;/code&gt;, it's linked to life time of a &lt;code&gt;Screen&lt;/code&gt;. There is also &lt;code&gt;LifecycleScreenEffect&lt;/code&gt; for easy observing lifecycle. See &lt;a href=&quot;%github_code_url%modo-compose/src/main/java/com/github/terrakok/modo/lifecycle/ScreenEffects.kt&quot;&gt;ScreenEffects&lt;/a&gt; for details.&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/ScreenEffectsSampleScreen.kt&quot;&gt;ScreenEffectsSampleScreen.kt&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Pager and LazyList integration&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;You can create custom &lt;code&gt;ContainerScreen&lt;/code&gt; and use internal &lt;code&gt;Screen&lt;/code&gt; inside &lt;code&gt;Vertical/HorizontalPager&lt;/code&gt; and &lt;code&gt;LazyRow/Column&lt;/code&gt;. It's vital to define &lt;code&gt;key = {}&lt;/code&gt; lambda with &lt;code&gt;InternalContent&lt;/code&gt; for correct intagration. For more details take a look to the samples. &lt;a href=&quot;%github_code_url%modo-compose%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgithub%2Fterrakok%2Fmodo%2Flazylist%2FLazyListUtils.kt&quot;&gt;LazyListUtils&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/containers/StackInLazyColumnScreen.kt&quot;&gt;StackInLazyColumnScreen.kt&lt;/a&gt;, &lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/containers/HorizontalPagerScreen.kt&quot;&gt;HorizontalPagerScreen.kt&lt;/a&gt;, &lt;a href=&quot;%github_code_url%sample/src/main/java/com/github/terrakok/modo/sample/screens/containers/custom/RemovableItemContainerScreen.kt&quot;&gt;RemovableItemContainerScreen.kt&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</historyEntry>
        <historyEntry timestamp="1717079068814">I have compse State in my ViewModel, how to convert it to flow?</historyEntry>
      </list>
    </option>
  </component>
</application>